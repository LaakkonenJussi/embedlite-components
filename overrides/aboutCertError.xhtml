<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE html [
  <!ENTITY % htmlDTD
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "DTD/xhtml1-strict.dtd">
  %htmlDTD;
  <!ENTITY % globalDTD
    SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % certerrorDTD
    SYSTEM "chrome://browser/locale/aboutCertError.dtd">
  %certerrorDTD;
]>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>&certerror.pagetitle;</title>
    <meta name="viewport" content="width=device-width; user-scalable=false" />
    <link rel="stylesheet" href="chrome://global/skin/netError.css" type="text/css" media="all" />
    <link rel="localization" href="browser/aboutCertError.ftl" />
    <link rel="localization" href="branding/brand.ftl"/>
    <!-- This page currently uses the same favicon as neterror.xhtml.
         If the location of the favicon is changed for both pages, the
         FAVICON_ERRORPAGE_URL symbol in toolkit/components/places/src/nsFaviconService.h
         should be updated. If this page starts using a different favicon
         than neterrorm nsFaviconService->SetAndLoadFaviconForPage
         should be updated to ignore this one as well. -->
    <link rel="icon" type="image/png" id="favicon" sizes="64x64" href="chrome://browser/skin/images/certerror-warning.png"/>

    <script type="application/javascript"><![CDATA[
      // Error url MUST be formatted like this:
      //   about:certerror?e=error&u=url&d=desc

      // Note that this file uses document.documentURI to get
      // the URL (with the format from above). This is because
      // document.location.href gets the current URI off the docshell,
      // which is the URL displayed in the location bar, i.e.
      // the URI that the user attempted to load.

      const formatter = new Intl.DateTimeFormat("default");
      let searchParams = new URLSearchParams(document.documentURI.split("?")[1]);

      function getErrorCode() {
        return searchParams.get("e");
      }

      function getCSSClass() {
        return searchParams.get("s");
      }

      function getDescription() {
        return searchParams.get("d");
      }

      function initPage() {
        // Replace the "#1" string in the intro with the hostname.  Trickier
        // than it might seem since we want to preserve the <b> tags, but
        // not allow for any injection by just using innerHTML.  Instead,
        // just find the right target text node.
        var intro = document.getElementById("introContentP1");
        function replaceWithHost(node) {
          if (node.textContent == "#1")
            node.textContent = location.host;
          else
            for (var i = 0; i < node.childNodes.length; i++)
              replaceWithHost(node.childNodes[i]);
        }
        replaceWithHost(intro);

        if (getCSSClass() == "expertBadCert") {
          toggle("technicalContent");
          toggle("expertContent");
        }

        // Disallow overrides if this is a Strict-Transport-Security
        // host and the cert is bad (STS Spec section 7.3) or if the
        // certerror is in a frame (bug 633691).
        if (getCSSClass() == "badStsCert" || window != top)
          document.getElementById("expertContent").setAttribute("hidden", "true");

        setTechnicalDetailsOnCertError();
      }

      async function setTechnicalDetailsOnCertError() {
        let technicalInfo = document.getElementById("technicalContentText");

        function setL10NLabel(l10nId, args = {}, attrs = {}, rewrite = true) {
          let elem = document.createElement("label");
          if (rewrite) {
            technicalInfo.textContent = "";
          }
          technicalInfo.appendChild(elem);

          let newLines = document.createTextNode("\n \n");
          technicalInfo.appendChild(newLines);

          if (attrs) {
            let link = document.createElement("a");
            for (let attr of Object.keys(attrs)) {
              link.setAttribute(attr, attrs[attr]);
            }
            elem.appendChild(link);
          }

          if (args) {
            document.l10n.setAttributes(elem, l10nId, args);
          } else {
            document.l10n.setAttributes(elem, l10nId);
          }
        }

        let cssClass = getCSSClass();
        let error = getErrorCode();

        let hostString = document.location.hostname;
        let port = document.location.port;
        if (port && port != 443) {
          hostString += ":" + port;
        }

        let l10nId;
        let args = {
          hostname: hostString,
        };
        let failedCertInfo = document.getFailedCertSecurityInfo();
        if (failedCertInfo.isUntrusted) {
          switch (failedCertInfo.errorCodeString) {
            case "MOZILLA_PKIX_ERROR_MITM_DETECTED":
              setL10NLabel("cert-error-mitm-intro");
              setL10NLabel("cert-error-mitm-mozilla", {}, {}, false);
              setL10NLabel("cert-error-mitm-connection", {}, {}, false);
              break;
            case "SEC_ERROR_UNKNOWN_ISSUER":
              setL10NLabel("cert-error-trust-unknown-issuer-intro");
              setL10NLabel("cert-error-trust-unknown-issuer", args, {}, false);
              break;
            case "SEC_ERROR_CA_CERT_INVALID":
              setL10NLabel("cert-error-intro", args);
              setL10NLabel("cert-error-trust-cert-invalid", {}, {}, false);
              break;
            case "SEC_ERROR_UNTRUSTED_ISSUER":
              setL10NLabel("cert-error-intro", args);
              setL10NLabel("cert-error-trust-untrusted-issuer", {}, {}, false);
              break;
            case "SEC_ERROR_CERT_SIGNATURE_ALGORITHM_DISABLED":
              setL10NLabel("cert-error-intro", args);
              setL10NLabel(
                "cert-error-trust-signature-algorithm-disabled",
                {},
                {},
                false
              );
              break;
            case "SEC_ERROR_EXPIRED_ISSUER_CERTIFICATE":
              setL10NLabel("cert-error-intro", args);
              setL10NLabel("cert-error-trust-expired-issuer", {}, {}, false);
              break;
            case "MOZILLA_PKIX_ERROR_SELF_SIGNED_CERT":
              setL10NLabel("cert-error-intro", args);
              setL10NLabel("cert-error-trust-self-signed", {}, {}, false);
              break;
            case "MOZILLA_PKIX_ERROR_ADDITIONAL_POLICY_CONSTRAINT_FAILED":
              setL10NLabel("cert-error-intro", args);
              setL10NLabel("cert-error-trust-symantec", {}, {}, false);
              break;
            default:
              setL10NLabel("cert-error-intro", args);
              setL10NLabel("cert-error-untrusted-default", {}, {}, false);
          }
        }

        if (failedCertInfo.isDomainMismatch) {
          let subjectAltNames = failedCertInfo.subjectAltNames.split(",");
          subjectAltNames = subjectAltNames.filter(name => !!name.length);
          let numSubjectAltNames = subjectAltNames.length;

          if (numSubjectAltNames != 0) {
            if (numSubjectAltNames == 1) {
              args["alt-name"] = subjectAltNames[0];

              // Let's check if we want to make this a link.
              let okHost = failedCertInfo.subjectAltNames;
              let href = "";
              let thisHost = document.location.hostname;
              let proto = document.location.protocol + "//";
              // If okHost is a wildcard domain ("*.example.com") let's
              // use "www" instead.  "*.example.com" isn't going to
              // get anyone anywhere useful. bug 432491
              okHost = okHost.replace(/^\*\./, "www.");
              /* case #1:
               * example.com uses an invalid security certificate.
               *
               * The certificate is only valid for www.example.com
               *
               * Make sure to include the "." ahead of thisHost so that
               * a MitM attack on paypal.com doesn't hyperlink to "notpaypal.com"
               *
               * We'd normally just use a RegExp here except that we lack a
               * library function to escape them properly (bug 248062), and
               * domain names are famous for having '.' characters in them,
               * which would allow spurious and possibly hostile matches.
               */

              if (okHost.endsWith("." + thisHost)) {
                href = proto + okHost;
              }
              /* case #2:
               * browser.garage.maemo.org uses an invalid security certificate.
               *
               * The certificate is only valid for garage.maemo.org
               */
              if (thisHost.endsWith("." + okHost)) {
                href = proto + okHost;
              }

              // Set the link if we want it.
              if (href) {
                setL10NLabel("cert-error-domain-mismatch-single", args, {
                  href,
                  "data-l10n-name": "domain-mismatch-link",
                  id: "cert_domain_link",
                });
              } else {
                setL10NLabel("cert-error-domain-mismatch-single-nolink", args);
              }
            } else {
              let names = subjectAltNames.join(", ");
              args["subject-alt-names"] = names;
              setL10NLabel("cert-error-domain-mismatch-multiple", args);
            }
          } else {
            setL10NLabel("cert-error-domain-mismatch", { hostname: hostString });
          }
        }

        if (failedCertInfo.isNotValidAtThisTime) {
          let notBefore = failedCertInfo.validNotBefore;
          let notAfter = failedCertInfo.validNotAfter;
          args = {
            hostname: hostString,
          };
          if (notBefore && Date.now() < notAfter) {
            let notBeforeLocalTime = formatter.format(new Date(notBefore));
            l10nId = "cert-error-not-yet-valid-now";
            args["not-before-local-time"] = notBeforeLocalTime;
          } else {
            let notAfterLocalTime = formatter.format(new Date(notAfter));
            l10nId = "cert-error-expired-now";
            args["not-after-local-time"] = notAfterLocalTime;
          }
          setL10NLabel(l10nId, args);
        }

        setL10NLabel(
          "cert-error-code-prefix-link",
          { error: failedCertInfo.errorCodeString },
          {
            title: failedCertInfo.errorCodeString,
            id: "errorCode",
            "data-l10n-name": "error-code-link",
            "data-telemetry-id": "error_code_link",
          },
          false
        );
      }

      function toggle(id) {
        var el = document.getElementById(id);
        if (el.hasAttribute("collapsed"))
          el.removeAttribute("collapsed");
        else
          el.setAttribute("collapsed", true);
      }
    ]]></script>
  </head>

  <body id="errorPage" class="certerror" dir="&locale.dir;">

    <!-- PAGE CONTAINER (for styling purposes only) -->
    <div id="errorPageContainer">

      <!-- Error Title -->
      <div id="errorTitle">
        <h1 class="errorTitleText">&certerror.longpagetitle;</h1>
      </div>

      <!-- LONG CONTENT (the section most likely to require scrolling) -->
      <div id="errorLongContent">
        <div id="introContent">
          <p id="introContentP1">&certerror.introPara1;</p>
        </div>

        <div id="whatShouldIDoContent">
          <h2>&certerror.whatShouldIDo.heading;</h2>
          <div id="whatShouldIDoContentText">
            <p>&certerror.whatShouldIDo.content;</p>
            <button id="getMeOutOfHereButton">&certerror.getMeOutOfHere.label;</button>
          </div>
        </div>

        <!-- The following sections can be unhidden by default by setting the
             "browser.xul.error_pages.expert_bad_cert" pref to true -->
        <div id="technicalContent" collapsed="true">
          <h2 class="expander" onclick="toggle('technicalContent');" id="technicalContentHeading">
            <span class="expander-caret"/>
            &certerror.technical.heading;
          </h2>
          <div>
            <p id="technicalContentText"/>
          </div>
        </div>

        <div id="expertContent" collapsed="true">
          <h2 class="expander" onclick="toggle('expertContent');" id="expertContentHeading">
            <span class="expander-caret"/>
            &certerror.expert.heading;
          </h2>
          <div>
            <p>&certerror.expert.content;</p>
            <p>&certerror.expert.contentPara2;</p>
            <button id="temporaryExceptionButton">&certerror.addTemporaryException.label;</button>
            <button id="permanentExceptionButton">&certerror.addPermanentException.label;</button>
          </div>
        </div>
      </div>
    </div>

    <!--
    - Note: It is important to run the script this way, instead of using
    - an onload handler. This is because error pages are loaded as
    - LOAD_BACKGROUND, which means that onload handlers will not be executed.
    -->
    <script type="application/javascript">initPage();</script>

  </body>
</html>
